1. reader-writer-mutex
// 3
// 1
// 10

#include<stdio.h>
#include<stdlib.h>
#include<semaphore.h>
#include<pthread.h>

int Data = 10;
int ReadCount=0;



pthread_mutex_t mutexEnter;
pthread_mutex_t mutexDb;



void* readDb(void* args)
{
    int id = *(int *)args;
    pthread_mutex_lock(&mutexEnter);
    ReadCount=ReadCount+1;
    if(ReadCount==1)
    {
        pthread_mutex_lock(&mutexDb);
    }
    pthread_mutex_unlock(&mutexEnter);
    
    pthread_mutex_lock(&mutexEnter);
    printf("\nReader %d Entering in Critical Region",id);
    ReadCount=ReadCount-1;
    if(ReadCount==0)
    {
        pthread_mutex_unlock(&mutexDb);
    }
    printf("\nReader %d reading data %d",id,Data);
    printf("\nReader %d Exiting Critical Region",id);
    pthread_mutex_unlock(&mutexEnter);
    
}

void* writeDb(void* args)
{
    int id = *(int *)args;
    int newData;
    pthread_mutex_lock(&mutexDb);
    printf("\nWriter %d Entering in Critical Region",id);
    printf("\nEnter data which you wants to update : ");
    scanf("%d",&newData);
    Data = newData;
    printf("\nWriter %d update the data to %d",id,Data);
    printf("\nWriter %d Exiting Critical Region",id);
    pthread_mutex_unlock(&mutexDb);
}




int main()
{
    // Producer Count
    int readC = 0;
    int writeC = 0;
    printf("\nEnter the number of Readers : ");
    scanf("%d",&readC);
    printf("\nEnter the number of Writers : ");
    scanf("%d",&writeC);
    int read = 0;
    int writer = 0;
    

    
    // creating threads
    pthread_t Reader[readC],Writer[writeC];
    int readId[readC];
    int writeId[writeC];
    
    // initialising semaphores
    pthread_mutex_init(&mutexEnter,NULL);
    pthread_mutex_init(&mutexDb,NULL);
    
    
    for(read;read<readC;read++)
    {
        readId[read] = read+1;
        pthread_create(&Reader[read],NULL,readDb,&readId[read]);
    }
    for(writer;writer<writeC;writer++)
    {
        writeId[writer] = writer+1;
        pthread_create(&Writer[writer],NULL,writeDb,&writeId[writer]);
        
    }
    // for(read;read<readC;read++)
    // {
    //     readId[read] = read+1;
    //     pthread_create(&Reader[read],NULL,readDb,&readId[read]);
    // }
    // for(writer;writer<writeC;writer++)
    // {
    //     writeId[writer] = writer+1;
    //     pthread_create(&Writer[writer],NULL,writeDb,&writeId[writer]);
        
    // }
    
    for(int i=0;i<readC;i++)
    {
        pthread_join(Reader[i], NULL);
    }
    for(int i=0;i<writeC;i++)
    {
        pthread_join(Writer[i], NULL);
    }
    
    return 0;
    
    
}

2.producer-consumer-mutex
// 4
// 3

#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>

#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int count = 0;

sem_t full, empty;
pthread_mutex_t mutex;

void *produce(void *args)
{
    int id = *((int *)args);

    if (count == BUFFER_SIZE)
    {
        printf("\nProducer Cannot Produce Because Buffer is Full");
    }
    else
    {
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        printf("\nProducer %d is Entered in Critical Region : ",id);
        printf int newProduct = count + 1;
        buffer[count] = newProduct;
        printf("\nProducer %d produce new product %d", id, newProduct);
        count = count + 1;
        printf("\nBuffer Status : \n");
        for (int i = 0; i < BUFFER_SIZE; i++)
        {
            printf("%d ", buffer[i]);
        }
        printf("\nProducer %d is Exit from Critical Region : ",id);
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
}   

void *consume(void *args)
{
    int id = *((int *)args);

    if (count == 0)
    {
        printf("\nConsumer Cannot Consume Because Buffer is Empty");
    }
    else
    {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        printf("\nConsumer %d is Entered in Critical Region : ",id);
        int consumeProduct = buffer[count - 1];
        printf("\nConsumer %d consume product %d", id, consumeProduct);
        count = count - 1;
        buffer[count] = 0;
        printf("\nBuffer Status : \n");
        for (int i = 0; i < BUFFER_SIZE; i++)
        {
            printf("%d ", buffer[i]);
        }
        printf("\nConsumer %d is Exit from Critical Region : ",id);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
}

int main()
{
    // Producer Count
    int Prod = 0;
    int Consu = 0;
    printf("\nEnter the number of Producer : ");
    scanf("%d", &Prod);
    printf("\nEnter the number of Consumer : ");
    scanf("%d", &Consu);
    int pro = 0;
    int con = 0;
    int counter = 0;

    for (int i = 0; i < BUFFER_SIZE; i++)
    {
        buffer[i] = 0;
    }

    // creating threads
    pthread_t Producer[Prod], Consumer[Consu];
    int ProdId[Prod], ConsuId[Consu];

    // initialising semaphores
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);
    pthread_mutex_init(&mutex, NULL);

    for (pro; pro < Prod; pro++)
    {
        ProdId[pro] = pro + 1;
        pthread_create(&Producer[pro], NULL, produce, &ProdId[pro]);
    }
    for (con; con < Consu; con++)
    {
        ConsuId[con] = con + 1;
        pthread_create(&Consumer[con], NULL, consume, &ConsuId[con]);
    }

    for (int i = 0; i < Prod; i++)
    {
        pthread_join(Producer[i], NULL);
    }
    for (int i = 0; i < Consu; i++)
    {
        pthread_join(Consumer[i], NULL);
    }

    return 0;
}

3.reader-eriter-semaphore
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>

int Data = 10;
int ReadCount = 0;

sem_t enter, db;

void *readDb(void *args)
{
    int id = *(int *)args;
    sem_wait(&enter);
    ReadCount = ReadCount + 1;
    if (ReadCount == 1)
    {
        sem_wait(&db);
    }
    sem_post(&enter);
    printf("\nReader %d Entering in Critical Region", id);
    printf("\nReader %d reading data %d", id, Data);
    printf("\nReader %d Exiting from Critical Region", id);
    sem_wait(&enter);
    ReadCount = ReadCount - 1;
    if (ReadCount == 0)
    {
        sem_post(&db);
    }
    sem_post(&enter);
}

void *writeDb(void *args)
{
    int id = *(int *)args;
    int newData;
    sem_wait(&db);
    printf("\nWriter %d Entering in Critical Region", id);
    printf("\nEnter data which you wants to update : ");
    scanf("%d", &newData);
    Data = newData;
    printf("\nWriter %d update the data to %d", id, Data);
    printf("\nWriter %d Exiting from Critical Region", id);
    sem_post(&db);
}

int main()
{
    // Producer Count
    int readC = 0;
    int writeC = 0;
    printf("\nEnter the number of Readers : ");
    scanf("%d", &readC);
    printf("\nEnter the number of Writers : ");
    scanf("%d", &writeC);
    int read = 0;
    int writer = 0;

    // creating threads
    pthread_t Reader[readC], Writer[writeC];
    int readId[readC];
    int writeId[writeC];

    // initialising semaphores
    sem_init(&enter, 0, 1);
    sem_init(&db, 0, 1);

    for (read; read < readC; read++)
    {
        readId[read] = read + 1;
        pthread_create(&Reader[read], NULL, readDb, &readId[read]);
    }
    for (writer; writer < writeC; writer++)
    {
        writeId[writer] = writer + 1;
        pthread_create(&Writer[writer], NULL, writeDb, &writeId[writer]);
    }

    for (int i = 0; i < readC; i++)
    {
        pthread_join(Reader[i], NULL);
    }
    for (int i = 0; i < writeC; i++)
    {
        pthread_join(Writer[i], NULL);
    }

    return 0;
}

4. producer-comsumer-semaphore
// 7
// 2

#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>

#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int count = 0;

sem_t full, empty;
sem_t S;

void *produce(void *args)
{
    int id = *((int *)args);

    if (count == BUFFER_SIZE)
    {
        printf("\nProducer Cannot Produce Because Buffer is Full");
        return;
    }
    else
    {
        sem_wait(&empty);
        sem_wait(&S);
        printf("\nProducer %d is Entered in Critical Region : ", id);
        int newProduct = count + 1;
        buffer[count] = newProduct;
        printf("\nProducer %d produce new product %d", id, newProduct);
        count = count + 1;
        printf("\nBuffer Status : \n");
        for (int i = 0; i < BUFFER_SIZE; i++)
        {
            printf("%d ", buffer[i]);
        }
        printf("\nProducer %d is Entered in Critical Region : ", id);
        sem_post(&S);
        sem_post(&full);
    }
}

void *consume(void *args)
{
    int id = *((int *)args);

    if (count == 0)
    {
        printf("\nConsumer Cannot Consume Because Buffer is Empty");
        return;
    }
    else
    {
        sem_wait(&full);
        sem_wait(&S);
        printf("\nConsumer %d is Entered in Critical Region : ", id);
        int consumeProduct = buffer[count - 1];
        printf("\nConsumer %d consume product %d", id, consumeProduct);
        count = count - 1;
        buffer[count] = 0;
        printf("\nBuffer Status : \n");
        for (int i = 0; i < BUFFER_SIZE; i++)
        {
            printf("%d ", buffer[i]);
        }
        sem_post(&S);
        sem_post(&empty);
        printf("\nConsumer %d is Exit from Critical Region : ", id);
    }
}

int main()
{
    // Producer Count
    int Prod = 0;
    int Consu = 0;
    printf("\nEnter the number of Producer : ");
    scanf("%d", &Prod);
    printf("\nEnter the number of Consumer : ");
    scanf("%d", &Consu);
    int pro = 0;
    int con = 0;
    int counter = 0;

    for (int i = 0; i < BUFFER_SIZE; i++)
    {
        buffer[i] = 0;
    }

    // creating threads
    pthread_t Producer[Prod], Consumer[Consu];
    int ProdId[Prod], ConsuId[Consu];

    // initialising semaphores
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&S, 0, 1);

    for (pro; pro <Prod; pro++)
    {
        ProdId[pro] = pro + 1;
        pthread_create(&Producer[pro], NULL, produce, &ProdId[pro]);
    }
    for (con; con < Consu; con++)
    {
        ConsuId[con] = con + 1;
        pthread_create(&Consumer[con], NULL, consume, &ConsuId[con]);
    }
    for (pro; pro < Prod; pro++)
    {
        ProdId[pro] = pro + 1;
        pthread_create(&Producer[pro], NULL, produce, &ProdId[pro]);
    }

    for (int i = 0; i < Consu; i++)
    {
        pthread_join(Consumer[i], NULL);
    }

    return 0;
}

5.dining philosopher
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Function representing the philosopher's actions
void* philosopher(void* num) {
    int id = *(int*)num;
    int count = 0;
    while (count<3) {
        // Think
        printf("Philosopher %d is thinking.\n", id);
        //usleep(rand() % 1000);

        // Pick up left fork
        pthread_mutex_lock(&forks[id]);
        printf("Philosopher %d picked up left fork.\n", id);

        // Pick up right fork
        pthread_mutex_lock(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d picked up right fork.\n", id);

        // Eat
        printf("Philosopher %d is eating.\n", id);
        //usleep(rand() % 1000);

        // Put down right fork
        pthread_mutex_unlock(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d put down right fork.\n", id);

        // Put down left fork
        pthread_mutex_unlock(&forks[id]);
        printf("Philosopher %d put down left fork.\n", id);
        count++;
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
        ids[i] = i; // assign philosopher id
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Join philosopher threads (this will never happen due to the infinite loop)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes (not reached because of infinite loop)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}

6. shell scripting
// 1
// 2
// 3
// 4
// 5
// 6
// 7

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>

void fork_exit_wait();
void file_operations();
void create_link();
void create_pipe();
void create_fifo();
void get_process_ids();

int main() {
    int choice;
    
    while (1) {
        printf("\nMenu:\n");
        printf("1. Fork, Exit, Wait\n");
        printf("2. File Operations (Open, Read, Write, Close)\n");
        printf("3. Create Link and Unlink\n");
        printf("4. Pipe\n");
        printf("5. FIFO\n");
        printf("6. Get Process IDs (getpid, getppid)\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                fork_exit_wait();
                break;
            case 2:
                file_operations();
                break;
            case 3:
                create_link();
                break;
            case 4:
                create_pipe();
                break;
            case 5:
                create_fifo();
                break;
            case 6:
                get_process_ids();
                break;
            case 7:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}

void fork_exit_wait() {
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        printf("In Child Process:\n");
        printf("Child PID: %d, Parent PID: %d\n", getpid(), getppid());
        exit(0);
    } else {
        wait(NULL);
        printf("In Parent Process:\n");
        printf("Parent PID: %d\n", getpid());
    }
}

void file_operations() {
    int fd;
    char buffer[100];
    const char *filename = "/tmp/example.txt";
    
    // Open, Write, Close
    fd = open(filename, O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        perror("Open failed");
        return;
    }
    write(fd, "Sample text written to file.\n", 29);
    close(fd);
    
    // Open, Read, Close
    fd = open(filename, O_RDONLY);
    if (fd < 0) {
        perror("Open failed");
        return;
    }
    read(fd, buffer, sizeof(buffer) - 1);
    printf("Read from file: %s\n", buffer);
    close(fd);
}

void create_link() {
    const char *filename = "/tmp/example.txt";
    const char *linkname = "/tmp/example_link.txt";
    
    if (link(filename, linkname) == 0) {
        printf("Link created: %s\n", linkname);
    } else {
        perror("Link creation failed");
    }
    
    if (unlink(linkname) == 0) {
        printf("Link removed: %s\n", linkname);
    } else {
        perror("Unlink failed");
    }
}

void create_pipe() {
    int pipe_fd[2];
    pid_t pid;
    char buffer[100];
    char message[] = "Message through pipe.\n";
    
    if (pipe(pipe_fd) == -1) {
        perror("Pipe creation failed");
        return;
    }
    
    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        close(pipe_fd[0]);
        write(pipe_fd[1], message, strlen(message) + 1);
        close(pipe_fd[1]);
        exit(0);
    } else {
        close(pipe_fd[1]);
        read(pipe_fd[0], buffer, sizeof(buffer));
        printf("Received from pipe: %s\n", buffer);
        close(pipe_fd[0]);
        wait(NULL);
    }
}

void create_fifo() {
    const char *fifo_path = "/tmp/my_fifo";
    char buffer[100];
    char message[] = "Message through FIFO.\n";
    int fd;
    
    if (mkfifo(fifo_path, 0666) == -1) {
        perror("FIFO creation failed");
        return;
    }
    printf("FIFO created at %s\n", fifo_path);
    
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        fd = open(fifo_path, O_WRONLY);
        write(fd, message, strlen(message) + 1);
        close(fd);
        exit(0);
    } else {
        fd = open(fifo_path, O_RDONLY);
        read(fd, buffer, sizeof(buffer));
        printf("Received from FIFO: %s\n", buffer);
        close(fd);
        wait(NULL);
        unlink(fifo_path);
        printf("FIFO removed\n");
    }
}

void get_process_ids() {
    printf("Current PID: %d\n", getpid());
    printf("Parent PID: %d\n", getppid());
}

7. 